name: Build UNet Studio
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag'
        required: true
        default: '2023.04.17'
      release_name:
        description: 'Release Name'
        required: true
        default: '2022.04.17 "Sun" Release'
jobs:
  windows_build:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2.5.0
    - name: Install Qt
      uses: jurplel/install-qt-action@v3.2.1
      with:
        version: 6.5.2
    - name: Install Ninja and CMake
      run: |    
        choco install ninja cmake

    - name: Install CUDA
      uses: Jimver/cuda-toolkit@v0.2.11
      env:
        CUDA_VERSION: "11.7"

    - name: Install LibTorch
      run: |
        curl -LO "https://download.pytorch.org/libtorch/cu117/libtorch-win-shared-with-deps-2.0.0%2Bcu117.zip"
        mkdir libtorch
        tar -xf "libtorch-win-shared-with-deps-2.0.0%2Bcu117.zip" -C libtorch
        echo "C:\libtorch\bin" >> $GITHUB_ENV
        echo "C:\libtorch" >> $GITHUB_ENV     
    - name: Install Zlib
      run: |
        ./build_packages/install_zlib.bat
        del "C:/Program Files/zlib/lib/zlib.lib"
        del "C:/Program Files/zlib/bin/zlib.dll"
    
    - name: Install TIPL
      run: |
        git clone https://github.com/frankyeh/TIPL.git
        git clone https://github.com/frankyeh/UNet-Studio-Data.git
    - name: Build UNet Studio
      run: |
        for /f "usebackq delims=#" %%a in (`"%programfiles(x86)%\Microsoft Visual Studio\Installer\vswhere" -latest -property installationPath`) do call "%%a\Common7\Tools\VsDevCmd.bat" -arch=x64
        mkdir -p build
        cmake -S . -B build -GNinja "-DZLIB_LIBRARY=C:/Program Files/zlib/lib/zlibstatic.lib" "-DCMAKE_BUILD_TYPE:STRING=Release" "-DCMAKE_C_COMPILER:STRING=cl" "-DCMAKE_CXX_COMPILER:STRING=cl" -DTIPL_DIR=. -DCMAKE_PREFIX_PATH="%{Qt:QT_INSTALL_PREFIX};./libtorch;./cudnn"
        cmake --build ./build --parallel --config Release
      shell: cmd      
    - name: Packaging
      run: |
        move UNet-Studio-Data unet_studio_win
        move install_win.bat unet_studio_win
        move build\unet_studio.exe unet_studio_win
        windeployqt --no-translations --no-system-d3d-compiler --compiler-runtime --no-opengl-sw unet_studio_win\unet_studio.exe
        del *.zip
    - name: Zip Release (Update)
      uses: TheDoctor0/zip-release@0.6.0
      with:
        filename: unet_studio_win.zip
        exclusions: .git
        path: unet_studio_win
    - name: Create Release
      uses: ncipollo/release-action@v1.8.9
      with:
        allowUpdates: true
        artifacts: "*.zip"
        tag: ${{ github.event.inputs.tag }}
        name: ${{ github.event.inputs.release_name }}
        prerelease: false  
        
  linux-build:
    strategy:
      matrix:
        os: [ubuntu2204,ubuntu2004]
      fail-fast: false
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3.0.0
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.0.0    
    - name: Build and push
      uses: docker/build-push-action@v5.1.0
      with:
        context: .
        file: build_packages/${{ matrix.os }}/Dockerfile
        push: false
        outputs: unet-studio
    - name: Packaging
      run: |
        zip -r unet_studio_${{ matrix.os }}.zip unet-studio
    - name: Create Release
      uses: ncipollo/release-action@v1.8.9
      with:
        allowUpdates: true
        artifacts: "*.zip"
        tag: ${{ github.event.inputs.tag }}
        name: ${{ github.event.inputs.release_name }}
        prerelease: false

  docker_build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2.5.0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2.1.0
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: false
        swap-storage: true      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.2.1
    - name: Login to DockerHub
      uses: docker/login-action@v2.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Log in to the Container registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Current Time
      run: echo "DATE_TAG=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: build_packages/docker/Dockerfile
        push: true
        tags: |
          "dsistudio/unetstudio:sun-${{ env.DATE_TAG }}"
          dsistudio/unetstudio:latest

  macos-build:
    strategy:
      matrix:
        os: [macos-12,macos-13]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      CFLAGS: -Werror
    steps:
    - uses: actions/checkout@v2.5.0
    - name: Setup Python
      uses: actions/setup-python@v5.0.0
      with:
        python-version: 3.11
    - name: Install PyTorch
      run: |
        python -m pip install --upgrade pip
        pip install torch torchvision torchaudio
    - name: Install CMake
      run: |
        brew update
        brew install cmake
    - name: Install Qt
      uses: jurplel/install-qt-action@v3.3.0
      with:
        version: '6.2'
    - name: Download TIPL and Atlases
      run: |
        git clone https://github.com/frankyeh/TIPL.git
        git clone https://github.com/frankyeh/UNet-Studio-Data.git
    - name: Build UNet Studio
      run: |
        mkdir -p build
        export TORCH_DIR="$(pip3.11 show torch | grep 'Location:' | awk '{print $2}')"
        cmake -S . -B build -DCMAKE_PREFIX_PATH=$TORCH_DIR/torch -DCMAKE_BUILD_TYPE:STRING=Release -DTIPL_DIR=.
        cmake --build ./build --parallel --config Release
        cd ..
    - name: Packaging
      run: |
        mv build/unet_studio.app .
        macdeployqt unet_studio.app
        mv UNet-Studio-Data/* unet_studio.app/Contents/MacOS/
        mv unet-studio.icns unet_studio.app/Contents/Resources/
        zip -r unet_studio_${{ matrix.os }}.zip unet_studio.app
    - name: Create Release
      uses: ncipollo/release-action@v1.8.9
      with:
        allowUpdates: true
        artifacts: "*.zip"
        tag: ${{ github.event.inputs.tag }}
        name: ${{ github.event.inputs.release_name }}
        prerelease: false
