name: Build UNet Studio
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag'
        required: true
        default: '2023.04.17'
      release_name:
        description: 'Release Name'
        required: true
        default: '2022.04.17 "Sun" Release'
      build_windows:
        type: boolean
        description: 'Build Windows'
        required: false
        default: 'true'
      build_linux:
        type: boolean
        description: 'Build Linux'
        required: false
        default: 'true'
      build_mac:
        type: boolean
        description: 'Build Mac'
        required: false
        default: 'true'
      build_docker:
        type: boolean
        description: 'Build Docker'
        required: false
        default: 'true'        
jobs:
  windows_build:
    if: ${{ github.event.inputs.build_windows == 'true' }}
    runs-on: windows-latest
    env:
      CMAKE_PREFIX_PATH: D:/a/UNet-Studio/UNet-Studio/libtorch
      Torch_DIR: D:/a/UNet-Studio/UNet-Studio/libtorch/share/cmake/Torch
    steps:
    - uses: actions/checkout@v2.5.0
    - name: Install Cuda
      uses: Jimver/cuda-toolkit@v0.2.23
    - name: Install LibTorch
      run: |
        curl -LO "https://download.pytorch.org/libtorch/cu117/libtorch-win-shared-with-deps-2.0.0%2Bcu117.zip"
        unzip "libtorch-win-shared-with-deps-2.0.0%2Bcu117.zip"
    - name: Install Qt
      uses: jurplel/install-qt-action@v3.2.1
      with:
        version: 6.5.2
    - name: Install Ninja and CMake
      run: |    
        choco install ninja cmake
    - name: Install Zlib
      run: |
        ./build_packages/install_zlib.bat
        del "C:/Program Files/zlib/lib/zlib.lib"
        del "C:/Program Files/zlib/bin/zlib.dll"
    
    - name: Install TIPL
      run: |
        git clone https://github.com/frankyeh/TIPL.git
        git clone https://github.com/frankyeh/UNet-Studio-Data.git

    - name: Build UNet Studio
      run: |
        # --- DIAGNOSTIC STEP ---
        # See exactly what is in the workspace directory. You should see 'libtorch' listed here.
        echo "--- Listing workspace contents ---"
        dir "${{ github.workspace }}"
 
        # Verify the exact path to the Torch cmake file CMake needs to find.
        echo "--- Verifying LibTorch cmake path ---"
        dir "${{ github.workspace }}\libtorch\share\cmake\Torch"
          
        # --- BUILD STEP ---
        # Set up the Visual Studio Environment
        for /f "usebackq delims=#" %%a in (`"%programfiles(x86)%\Microsoft Visual Studio\Installer\vswhere" -latest -property installationPath`) do call "%%a\Common7\Tools\VsDevCmd.bat" -arch=x64
         
        # Create build directory
        mkdir build

        # Configure CMake using the robust workspace variable.
        # We only need to set CMAKE_PREFIX_PATH.
        cmake -S . -B build -GNinja -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH="${{ github.workspace }}/libtorch" -DTIPL_DIR=.

        # Build the project
        cmake --build ./build --parallel --config Release
      shell: cmd
    - name: Packaging
      run: |
        move UNet-Studio-Data unet_studio_win
        move install_win.bat unet_studio_win
        move build\unet_studio.exe unet_studio_win
        windeployqt --no-translations --no-system-d3d-compiler --compiler-runtime --no-opengl-sw unet_studio_win\unet_studio.exe
        del *.zip
    - name: Zip Release (Update)
      uses: TheDoctor0/zip-release@0.6.0
      with:
        filename: unet_studio_win.zip
        exclusions: .git
        path: unet_studio_win
    - name: Create Release
      uses: ncipollo/release-action@v1.8.9
      with:
        allowUpdates: true
        artifacts: "*.zip"
        tag: ${{ github.event.inputs.tag }}
        name: ${{ github.event.inputs.release_name }}
        prerelease: false  
        
  linux-build:
    if: ${{ github.event.inputs.build_linux == 'true' }}
    strategy:
      matrix:
        os: [ubuntu2204,ubuntu2404]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4.1.1
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3.0.0
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.0.0    
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@v1.3.1
    - name: Build and push
      uses: docker/build-push-action@v5.1.0
      with:
        context: .
        file: build_packages/${{ matrix.os }}/Dockerfile
        push: false
        outputs: unet-studio
    - name: Packaging
      run: |
        zip -r unet_studio_${{ matrix.os }}.zip unet-studio
    - name: Create Release
      uses: ncipollo/release-action@v1.8.9
      with:
        allowUpdates: true
        artifacts: "*.zip"
        tag: ${{ github.event.inputs.tag }}
        name: ${{ github.event.inputs.release_name }}
        prerelease: false

  docker_build:
    if: ${{ github.event.inputs.build_docker == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2.5.0
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2.1.0
    - name: Free Disk Space (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: false
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: false
        swap-storage: true      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2.2.1
    - name: Login to DockerHub
      uses: docker/login-action@v2.1.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Log in to the Container registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Current Time
      run: echo "DATE_TAG=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: build_packages/docker/Dockerfile
        push: true
        tags: |
          "dsistudio/unetstudio:sun-${{ env.DATE_TAG }}"
          dsistudio/unetstudio:latest

  macos-build:
    if: ${{ github.event.inputs.build_mac == 'true' }}
    strategy:
      matrix:
        os: [macos-13,macos-14,macos-15]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      CFLAGS: -Werror
    steps:
    - uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install PyTorch
      run: |
        python -m pip install --upgrade pip
        pip install torch==2.0.0 torchvision==0.15.1 torchaudio==2.0.1

    - name: brew update
      run: |
        brew update
        brew uninstall cmake
        brew install cmake

    - name: Install Qt
      uses: jurplel/install-qt-action@v4.1.1
      with:
        version: 6.8    
        cache: true

    - name: Download TIPL and Data
      run: |
        git clone https://github.com/frankyeh/TIPL.git
        git clone https://github.com/frankyeh/UNet-Studio-Data.git

    - name: Build UNet Studio 🔧
      run: |
        # Get the python site-packages directory where torch is installed
        TORCH_SITE_PACKAGES=$(pip3.11 show torch | grep 'Location:' | awk '{print $2}')
        echo "Found torch site-packages at: $TORCH_SITE_PACKAGES"
        
        # Save this path for the packaging step later
        echo "TORCH_SITE_PACKAGES=$TORCH_SITE_PACKAGES" >> $GITHUB_ENV

        # Configure CMake using the correct path to the Torch cmake files
        mkdir -p build
        cmake -S . -B build -DCMAKE_PREFIX_PATH="$TORCH_SITE_PACKAGES/torch/share/cmake/Torch" -DCMAKE_BUILD_TYPE=Release -DTIPL_DIR=.
        
        # Build the project
        cmake --build ./build --parallel --config Release
        
    - name: Package Qt Dependencies 📦
      run: |
        # Move the app to the working directory and run macdeployqt
        mv build/unet_studio.app .
        macdeployqt unet_studio.app

    - name: Bundle Torch Libraries 🚀
      env:
        # This makes the variable from the previous step available in the shell
        TORCH_SITE_PACKAGES: ${{ env.TORCH_SITE_PACKAGES }}
      run: |
        # Define key paths
        APP_BUNDLE="unet_studio.app"
        FRAMEWORKS_DIR="$APP_BUNDLE/Contents/Frameworks"
        EXECUTABLE_PATH="$APP_BUNDLE/Contents/MacOS/unet_studio"
        
        # Correctly define the torch lib directory using the passed-in variable
        TORCH_LIB_DIR="$TORCH_SITE_PACKAGES/torch/lib"

        # 1. Create the Frameworks directory
        echo "Creating Frameworks directory at $FRAMEWORKS_DIR"
        mkdir -p "$FRAMEWORKS_DIR"

        # 2. Identify and copy Torch dylibs
        dylibs_to_copy=(
            "libc10.dylib"
            "libtorch.dylib"
            "libtorch_cpu.dylib"
            "libgomp.1.dylib"
        )
        echo "Copying Torch libraries from $TORCH_LIB_DIR..."
        for dylib in "${dylibs_to_copy[@]}"; do
            if [ -f "$TORCH_LIB_DIR/$dylib" ]; then
                cp "$TORCH_LIB_DIR/$dylib" "$FRAMEWORKS_DIR/"
                echo "  - Copied $dylib"
            fi
        done

        # 3. Update the executable to find the new libraries
        echo "Updating executable library paths..."
        for dylib in "${dylibs_to_copy[@]}"; do
            if [ -f "$FRAMEWORKS_DIR/$dylib" ]; then
                install_name_tool -change "$TORCH_LIB_DIR/$dylib" "@rpath/$dylib" "$EXECUTABLE_PATH" || echo "No change needed for $dylib"
            fi
        done

        # 4. Safely add the executable's rpath
        echo "Checking and setting rpath for the executable..."
        # This command checks if the rpath already exists before trying to add it.
        if ! otool -l "$EXECUTABLE_PATH" | grep -q "path @executable_path/../Frameworks"; then
            install_name_tool -add_rpath "@executable_path/../Frameworks" "$EXECUTABLE_PATH"
            echo "  - RPATH added."
        else
            echo "  - RPATH already exists."
        fi
        
    - name: Finalize Package and Zip 🎁
      run: |
        # Move data and icons into the finalized app bundle
        mv UNet-Studio-Data/* unet_studio.app/Contents/MacOS/
        # The icns file seems to be missing from the build steps, assuming it's in the repo root
        # If unet-studio.icns is generated during build, adjust the source path
        if [ -f "unet-studio.icns" ]; then
            mv unet-studio.icns unet_studio.app/Contents/Resources/
        fi
        zip -r unet_studio_${{ matrix.os }}.zip unet_studio.app

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        artifacts: "*.zip"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.event.inputs.tag }}
        name: ${{ github.event.inputs.release_name }}
        prerelease: false
